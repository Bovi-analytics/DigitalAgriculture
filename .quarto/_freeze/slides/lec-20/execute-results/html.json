{
  "hash": "ab7485dec9bc55da85c7cbc7f60a2074",
  "result": {
    "markdown": "---\ntitle: \"LR: Prediction / classification\"\nsubtitle: \"STA 210 - Spring 2022\"\nauthor: \"Dr. Mine Çetinkaya-Rundel\"\nfooter: \"[sta210-s22.github.io/website](https://sta210-s22.github.io/website/)\"\nlogo: \"images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    incremental: true \n    chalkboard: true\neditor: visual\nexecute:\n  freeze: auto\n  echo: true\n---\n\n\n\n\n# Welcome\n\n## Topics\n\n::: nonincremental\n-   Bulding predictive logistic regression models\n-   Sensitivity and specificity\n-   Making classification decisions\n:::\n\n## Computational setup\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(openintro)\nlibrary(knitr)\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 20))\n```\n:::\n\n\n# Data\n\n## `openintro::email` {.smaller}\n\nThese data represent incoming emails for the first three months of 2012 for an email account.\n\n::: nonincremental\n-   Outcome: `spam` - Indicator for whether the email was spam.\n-   Predictors: `spam`, \\``to_multiple`, `from`, `cc`, `sent_email`, `time`, `image`, `attach`, `dollar`, `winner`, `inherit`, `viagra`, `password`, `num_char`, `line_breaks`, `format`, `re_subj`, `exclaim_subj`, `urgent_subj`, `exclaim_mess`, `number`.\n:::\n\nSee [here](http://openintrostat.github.io/openintro/reference/email.html) for more detailed information on the variables.\n\n## Training and testing split\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Fix random numbers by setting the seed \n# Enables analysis to be reproducible when random numbers are used \nset.seed(1116)\n\n# Put 75% of the data into the training set \nemail_split <- initial_split(email)\n\n# Create data frames for the two sets\nemail_train <- training(email_split)\nemail_test  <- testing(email_split)\n```\n:::\n\n\n## Exploratory analysis\n\nThe sample is **unbalanced** with respect to `spam`.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Reminder: Modeling workflow\n\n-   Create a recipe for feature engineering steps to be applied to the training data\n\n-   Fit the model to the training data after these steps have been applied\n\n-   Using the model estimates from the training data, predict outcomes for the test data\n\n-   Evaluate the performance of the model on the test data\n\n# Start with a recipe\n\n## Initiate a recipe {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- recipe(\n  spam ~ .,          # formula\n  data = email_train  # data to use for cataloging names and types of variables\n  )\nsummary(email_rec)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 × 4\n   variable     type      role      source  \n   <chr>        <list>    <chr>     <chr>   \n 1 to_multiple  <chr [3]> predictor original\n 2 from         <chr [3]> predictor original\n 3 cc           <chr [2]> predictor original\n 4 sent_email   <chr [3]> predictor original\n 5 time         <chr [1]> predictor original\n 6 image        <chr [2]> predictor original\n 7 attach       <chr [2]> predictor original\n 8 dollar       <chr [2]> predictor original\n 9 winner       <chr [3]> predictor original\n10 inherit      <chr [2]> predictor original\n11 viagra       <chr [2]> predictor original\n12 password     <chr [2]> predictor original\n13 num_char     <chr [2]> predictor original\n14 line_breaks  <chr [2]> predictor original\n15 format       <chr [3]> predictor original\n16 re_subj      <chr [3]> predictor original\n17 exclaim_subj <chr [2]> predictor original\n18 urgent_subj  <chr [3]> predictor original\n19 exclaim_mess <chr [2]> predictor original\n20 number       <chr [3]> predictor original\n21 spam         <chr [3]> outcome   original\n```\n:::\n:::\n\n\n## Remove certain variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_rm(from, sent_email)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Feature engineer date\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_date(time, features = c(\"dow\", \"month\")) %>%\n  step_rm(time)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Discretize numeric variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_cut(cc, attach, dollar, breaks = c(0, 1))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Create dummy variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_dummy(all_nominal(), -all_outcomes())\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Remove zero variance variables\n\nVariables that contain only a single value\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_zv(all_predictors())\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## All in one place\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- recipe(spam ~ ., data = email_train) %>%\n  step_rm(from, sent_email) %>%\n  step_date(time, features = c(\"dow\", \"month\")) %>%               \n  step_rm(time) %>%\n  step_cut(cc, attach, dollar, breaks = c(0, 1)) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_zv(all_predictors())\n```\n:::\n\n\n# Build a workflow\n\n## Define model\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_spec <- logistic_reg() %>% \n  set_engine(\"glm\")\nemail_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n\n## Define workflow {.smaller}\n\n**Remember:** Workflows bring together models and recipes so that they can be easily applied to both the training and test data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_wflow <- workflow() %>% \n  add_model(email_spec) %>% \n  add_recipe(email_rec)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_rm()\n• step_date()\n• step_rm()\n• step_cut()\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n\n## Fit model to training data {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_fit <- email_wflow %>% \n  fit(data = email_train)\n\ntidy(email_fit) %>% print(n = 31)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 5\n   term            estimate std.error statistic  p.value\n   <chr>              <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)     -0.630     0.266     -2.36   1.81e- 2\n 2 image           -1.72      0.958     -1.80   7.21e- 2\n 3 inherit          0.340     0.183      1.86   6.23e- 2\n 4 viagra           2.17    110.         0.0197 9.84e- 1\n 5 password        -0.963     0.405     -2.38   1.75e- 2\n 6 num_char         0.0475    0.0246     1.93   5.35e- 2\n 7 line_breaks     -0.00499   0.00140   -3.56   3.75e- 4\n 8 exclaim_subj    -0.196     0.287     -0.685  4.93e- 1\n 9 exclaim_mess     0.00836   0.00188    4.45   8.49e- 6\n10 to_multiple_X1  -2.60      0.368     -7.05   1.73e-12\n11 cc_X.1.68.      -0.323     0.516     -0.625  5.32e- 1\n12 attach_X.1.21.   2.14      0.399      5.38   7.44e- 8\n13 dollar_X.1.64.   0.151     0.230      0.656  5.12e- 1\n14 winner_yes       2.22      0.438      5.06   4.17e- 7\n15 format_X1       -0.933     0.165     -5.64   1.66e- 8\n16 re_subj_X1      -2.95      0.464     -6.35   2.09e-10\n17 urgent_subj_X1   4.75      1.24       3.83   1.30e- 4\n18 number_small    -0.932     0.173     -5.39   7.13e- 8\n19 number_big      -0.154     0.256     -0.603  5.46e- 1\n20 time_dow_Mon    -0.342     0.313     -1.09   2.74e- 1\n21 time_dow_Tue     0.0403    0.286      0.141  8.88e- 1\n22 time_dow_Wed    -0.307     0.288     -1.07   2.86e- 1\n23 time_dow_Thu    -0.259     0.291     -0.888  3.75e- 1\n24 time_dow_Fri    -0.0669    0.284     -0.235  8.14e- 1\n25 time_dow_Sat     0.0158    0.306      0.0518 9.59e- 1\n26 time_month_Feb   0.755     0.187      4.04   5.41e- 5\n27 time_month_Mar   0.563     0.185      3.04   2.34e- 3\n28 time_month_Apr -12.4     384.        -0.0322 9.74e- 1\n```\n:::\n:::\n\n\n# Make predictions\n\n## Make predictions for test data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred <- predict(email_fit, email_test, type = \"prob\") %>% \n  bind_cols(email_test) \nemail_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 981 × 23\n   .pred_0  .pred_1 spam  to_multiple from     cc sent_email time               \n     <dbl>    <dbl> <fct> <fct>       <fct> <int> <fct>      <dttm>             \n 1   0.952 0.0476   0     0           1         0 0          2012-01-01 08:03:59\n 2   0.994 0.00644  0     1           1         0 1          2012-01-01 18:55:06\n 3   0.998 0.00165  0     0           1         1 1          2012-01-01 20:38:32\n 4   0.997 0.00285  0     0           1         2 0          2012-01-02 00:32:53\n 5   0.989 0.0105   0     0           1         0 0          2012-01-02 06:42:16\n 6   0.999 0.000757 0     0           1         1 0          2012-01-02 16:12:51\n 7   0.995 0.00529  0     0           1         4 0          2012-01-02 17:45:36\n 8   0.876 0.124    0     0           1         0 0          2012-01-02 22:55:03\n 9   0.963 0.0375   0     0           1         0 0          2012-01-03 02:07:17\n10   0.997 0.00343  0     0           1         0 1          2012-01-03 05:34:50\n# ℹ 971 more rows\n# ℹ 15 more variables: image <dbl>, attach <dbl>, dollar <dbl>, winner <fct>,\n#   inherit <dbl>, viagra <dbl>, password <dbl>, num_char <dbl>,\n#   line_breaks <int>, format <fct>, re_subj <fct>, exclaim_subj <dbl>,\n#   urgent_subj <fct>, exclaim_mess <dbl>, number <fct>\n```\n:::\n:::\n\n\n## A closer look at predictions\n\n::: question\nWhich of the following 10 emails will be misclassified?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  arrange(desc(.pred_1)) %>%\n  select(contains(\"pred\"), spam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 981 × 3\n   .pred_0 .pred_1 spam \n     <dbl>   <dbl> <fct>\n 1  0.0284   0.972 1    \n 2  0.0987   0.901 1    \n 3  0.111    0.889 0    \n 4  0.132    0.868 1    \n 5  0.134    0.866 0    \n 6  0.180    0.820 1    \n 7  0.191    0.809 0    \n 8  0.245    0.755 1    \n 9  0.250    0.750 1    \n10  0.251    0.749 0    \n# ℹ 971 more rows\n```\n:::\n:::\n\n\n# Sensitivity and specificity\n\n## False positive and negative {.smaller}\n\n|                              | Email is spam                 | Email is not spam             |\n|------------------------------|-------------------------------|-------------------------------|\n| Email classified as spam     | True positive                 | False positive (Type 1 error) |\n| Email classified as not spam | False negative (Type 2 error) | True negative                 |\n\n-   False negative rate = P(classified as not spam \\| Email spam) = FN / (TP + FN)\n\n-   False positive rate = P(classified as spam \\| Email not spam) = FP / (FP + TN)\n\n## Sensitivity and specificity {.smaller}\n\n|                              | Email is spam                     | Email is not spam                 |\n|------------------------------|-----------------------------------|-----------------------------------|\n| Email classified as spam     | True positive                     | False positive (**Type 1 error**) |\n| Email classified as not spam | False negative (**Type 2 error**) | True negative                     |\n\n-   Sensitivity = P(classified as spam \\| Email spam) = TP / (TP + FN)\n    -   Sensitivity = 1 − False negative rate\n-   Specificity = P(classified as not spam \\| Email not spam) = TN / (FP + TN)\n    -   Specificity = 1 − False positive rate\n\n. . .\n\n::: question\nIf you were designing a spam filter, would you want sensitivity and specificity to be high or low?\nWhat are the trade-offs associated with each decision?\n:::\n\n## Evaluate the performance\n\n**Receiver operating characteristic (ROC) curve**<sup>+</sup> which plot true positive rate vs. false positive rate (1 - specificity).\n\n::: aside\n<sup>+</sup> Originally developed for operators of military radar receivers, hence the name.\n:::\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_curve(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  ) %>%\n  autoplot()\n```\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n:::\n\n## ROC curve, under the hood\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_curve(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 981 × 3\n    .threshold specificity sensitivity\n         <dbl>       <dbl>       <dbl>\n 1 -Inf            0                 1\n 2    2.22e-16     0                 1\n 3    9.07e- 9     0.00111           1\n 4    2.34e- 8     0.00223           1\n 5    6.04e- 6     0.00334           1\n 6    1.63e- 5     0.00446           1\n 7    2.31e- 5     0.00557           1\n 8    3.00e- 5     0.00669           1\n 9    3.59e- 5     0.00780           1\n10    4.13e- 5     0.00892           1\n# ℹ 971 more rows\n```\n:::\n:::\n\n\n## ROC curve\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Evaluate the performance\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_auc(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.854\n```\n:::\n:::\n\n\n# Make decisions\n\n## Cutoff probability: 0.5 {.smaller}\n\n::: panel-tabset\n## Output\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.5**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                             | Email is not spam| Email is spam|\n|:----------------------------|-----------------:|-------------:|\n|Email classified as not spam |               882|            71|\n|Email classified as spam     |                15|            13|\n:::\n:::\n\n\n## Code\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.5\nemail_pred %>%\n  mutate(\n    spam_pred = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0)),\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(spam_pred == 1, \"Email classified as spam\", \"Email classified as not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n\n:::\n\n## Confusion matrix\n\nCross-tabulation of observed and predicted classes:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  mutate(spam_predicted = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0))) %>%\n  conf_mat(truth = spam, estimate = spam_predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction   0   1\n         0 882  71\n         1  15  13\n```\n:::\n:::\n\n\n## Classification\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Cutoff probability: 0.25 {.smaller}\n\n::: panel-tabset\n## Output\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.25**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                             | Email is not spam| Email is spam|\n|:----------------------------|-----------------:|-------------:|\n|Email classified as not spam |               828|            41|\n|Email classified as spam     |                69|            43|\n:::\n:::\n\n\n## Code\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.25\nemail_pred %>%\n  mutate(\n    spam_pred = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0)),\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(spam_pred == 1, \"Email classified as spam\", \"Email classified as not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n\n:::\n\n## Classification\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Cutoff probability: 0.75 {.smaller}\n\n::: panel-tabset\n## Output\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.75**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                             | Email is not spam| Email is spam|\n|:----------------------------|-----------------:|-------------:|\n|Email classified as not spam |               894|            78|\n|Email classified as spam     |                 3|             6|\n:::\n:::\n\n\n## Code\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.75\nemail_pred %>%\n  mutate(\n    spam_pred = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0)),\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(spam_pred == 1, \"Email classified as spam\", \"Email classified as not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n\n:::\n\n## Classification\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=90%}\n:::\n:::\n",
    "supporting": [
      "lec-20_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
---
title: "Operations with R"
format: html
editor: visual
---

Let's define some values named 'x', 'y', and 'z'.

```{r}
x <- 1:10 
y <- 5.8 
z <- 1+5i
```

What type of value is x? (use "class" function). What about y and z?

```{r}
class(x)
```

What is the product of x times y?

```{r}
x*y
```

The function "c" combine values into a vector or list. Characters needs to be between "". The semicolon or a new line separates processes.

What are the differences between the three x values created below? what is the final value for x?

```{r}
x <- c(TRUE, TRUE, FALSE); x
x <-c("yes", "yes", "no", "yes"); x
x <- as.factor(c("yes", "yes", "no", "yes")); x
```

How many "yes" or "no" the value x has?

```{r}
table(x)
```

Can I transform these character values to numbers?

```{r}
unclass(x)
```

What these functions do?

```{r}
rep(10,4); seq(1,5,by=0.1)
```

Let's create a matrix

```{r}
m <- matrix(1:6, nrow = 2, ncol = 3)
```

How many rows and columns the matrix named 'm' has?

```{r}
dim(m)
```

Let's create a data frame

```{r}
df <- data.frame(num = 1:4, boo = c(T, T, F,F), chr = c("yes","no","perhaps","whynot"));
```

Look at the differences in the matrix and data.frame functions. In the matrix, 'nrow'and 'ncol' are arguments for the function. In the data frame, 'num', 'boo', and 'chr' are column names.

What are the dimensions of the data frame?

```{r}
dim(df)
```

How are are the columns named?

```{r}
colnames(df)
```

Can I rename those columns as 'meh', 'mih', and 'moh', for example?

```{r}
colnames(df)<-c("meh","mih","moh")
```

I want to look at the values contained in the column named "moh" (the third column). How can I do that?

```{r}
df$moh; df[[3]]; df[,3] ; df[,-(1:2)]; df[["moh"]] 
```

I want to look at the value contained in the first row and the third column. How can I do that?

```{r}
df[1,3] 
```

How can I assign the values contained in the third column to a new value?

```{r}
new_val <- df[["moh"]]
```

What type of value is this?

```{r}
class(new_val)
```

How can I create a new data frame with the values contained in the second and third column?

```{r}
new_df <- df[2:3]
```

Are you sure it is a data frame?

```{r}
class(new_df)
```

What about with the values contained in the first and third column?

```{r}
new_df2 <- df[c(1,3)]
```

Can you think on another way to get this new_df2?
